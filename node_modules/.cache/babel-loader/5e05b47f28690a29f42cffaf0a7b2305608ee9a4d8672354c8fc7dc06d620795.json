{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport api from '../api';\nimport { useRouter } from 'vue-router';\n\n//init router\nconst router = useRouter();\nexport const useProducts = defineStore({\n  id: 'products',\n  state: () => ({\n    products: [],\n    product: [],\n    currentPage: 1,\n    lastPage: 1,\n    query: '',\n    error: null,\n    errors: [] // error field input product\n  }),\n\n  actions: {\n    async fetchDataProducts(page = 1, query = '', category = null) {\n      try {\n        console.log('Fetching Products:', page, query, category);\n        const response = await api.get('/api/products', {\n          params: {\n            page,\n            query,\n            category\n          }\n        });\n        this.products = response.data.data.data;\n        this.currentPage = response.data.data.current_page;\n        this.lastPage = response.data.data.last_page;\n        this.error = null;\n      } catch (err) {\n        this.error = 'Error fetching category data.';\n      }\n    },\n    async storeProduct() {\n      //init formData\n      let formData = new FormData();\n\n      //assign state value to formData\n      formData.append(\"image\", this.product.image);\n      formData.append(\"name\", this.product.name);\n      formData.append(\"desc\", this.product.desc);\n      formData.append(\"price\", this.product.price);\n      formData.append(\"category_id\", this.product.category_id);\n\n      //store data with API\n      await api.post('/api/products', formData).then(() => {\n        //redirect\n        router.push({\n          path: \"/dashboard/products\"\n        });\n      }).catch(() => {\n        //assign response error data to state \"errors\"\n        this.errors = [];\n      });\n    }\n  }\n});","map":{"version":3,"names":["defineStore","api","useRouter","router","useProducts","id","state","products","product","currentPage","lastPage","query","error","errors","actions","fetchDataProducts","page","category","console","log","response","get","params","data","current_page","last_page","err","storeProduct","formData","FormData","append","image","name","desc","price","category_id","post","then","push","path","catch"],"sources":["E:/Programming/PROJECT/sm-putra/smputra-frontend/src/store/products.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport api from '../api';\r\nimport { useRouter } from 'vue-router';\r\n\r\n//init router\r\nconst router = useRouter();\r\n\r\nexport const useProducts = defineStore({\r\n  id: 'products',\r\n  state: () => ({ \r\n    products: [],\r\n    product: [],\r\n    currentPage: 1,\r\n    lastPage: 1,\r\n    query: '',\r\n    error: null,\r\n    errors: [] // error field input product\r\n  }),\r\n  actions: {\r\n    async fetchDataProducts(page = 1, query = '', category = null) {\r\n      try {\r\n        console.log('Fetching Products:', page, query, category);\r\n        const response = await api.get('/api/products', { params: { page, query, category } });\r\n        this.products = response.data.data.data;\r\n        this.currentPage = response.data.data.current_page;\r\n        this.lastPage = response.data.data.last_page;\r\n        this.error = null;\r\n      } catch (err) {\r\n        this.error = 'Error fetching category data.';\r\n      }\r\n    },\r\n    async storeProduct (){\r\n\r\n      //init formData\r\n      let formData = new FormData();\r\n\r\n      //assign state value to formData\r\n      formData.append(\"image\", this.product.image);\r\n      formData.append(\"name\", this.product.name);\r\n      formData.append(\"desc\", this.product.desc);\r\n      formData.append(\"price\", this.product.price);\r\n      formData.append(\"category_id\", this.product.category_id);\r\n\r\n      //store data with API\r\n      await api.post('/api/products', formData)\r\n      .then(() => {\r\n          //redirect\r\n          router.push({ path: \"/dashboard/products\" });\r\n      })\r\n      .catch(() => {\r\n          //assign response error data to state \"errors\"\r\n          this.errors = [];\r\n      });\r\n  },\r\n  },\r\n});\r\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,OAAOC,GAAG,MAAM,QAAQ;AACxB,SAASC,SAAS,QAAQ,YAAY;;AAEtC;AACA,MAAMC,MAAM,GAAGD,SAAS,CAAC,CAAC;AAE1B,OAAO,MAAME,WAAW,GAAGJ,WAAW,CAAC;EACrCK,EAAE,EAAE,UAAU;EACdC,KAAK,EAAEA,CAAA,MAAO;IACZC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,CAAC;IACdC,QAAQ,EAAE,CAAC;IACXC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE,EAAE,CAAC;EACb,CAAC,CAAC;;EACFC,OAAO,EAAE;IACP,MAAMC,iBAAiBA,CAACC,IAAI,GAAG,CAAC,EAAEL,KAAK,GAAG,EAAE,EAAEM,QAAQ,GAAG,IAAI,EAAE;MAC7D,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,IAAI,EAAEL,KAAK,EAAEM,QAAQ,CAAC;QACxD,MAAMG,QAAQ,GAAG,MAAMnB,GAAG,CAACoB,GAAG,CAAC,eAAe,EAAE;UAAEC,MAAM,EAAE;YAAEN,IAAI;YAAEL,KAAK;YAAEM;UAAS;QAAE,CAAC,CAAC;QACtF,IAAI,CAACV,QAAQ,GAAGa,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACA,IAAI;QACvC,IAAI,CAACd,WAAW,GAAGW,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACC,YAAY;QAClD,IAAI,CAACd,QAAQ,GAAGU,QAAQ,CAACG,IAAI,CAACA,IAAI,CAACE,SAAS;QAC5C,IAAI,CAACb,KAAK,GAAG,IAAI;MACnB,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZ,IAAI,CAACd,KAAK,GAAG,+BAA+B;MAC9C;IACF,CAAC;IACD,MAAMe,YAAYA,CAAA,EAAG;MAEnB;MACA,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;MAE7B;MACAD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACtB,OAAO,CAACuB,KAAK,CAAC;MAC5CH,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACtB,OAAO,CAACwB,IAAI,CAAC;MAC1CJ,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACtB,OAAO,CAACyB,IAAI,CAAC;MAC1CL,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACtB,OAAO,CAAC0B,KAAK,CAAC;MAC5CN,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,IAAI,CAACtB,OAAO,CAAC2B,WAAW,CAAC;;MAExD;MACA,MAAMlC,GAAG,CAACmC,IAAI,CAAC,eAAe,EAAER,QAAQ,CAAC,CACxCS,IAAI,CAAC,MAAM;QACR;QACAlC,MAAM,CAACmC,IAAI,CAAC;UAAEC,IAAI,EAAE;QAAsB,CAAC,CAAC;MAChD,CAAC,CAAC,CACDC,KAAK,CAAC,MAAM;QACT;QACA,IAAI,CAAC3B,MAAM,GAAG,EAAE;MACpB,CAAC,CAAC;IACN;EACA;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}