{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport api from '../api';\nimport router from '@/router';\nexport const useAuth = defineStore({\n  id: 'auth',\n  state: () => ({\n    loggedIn: localStorage.getItem('loggedIn'),\n    token: localStorage.getItem('token'),\n    user: [],\n    validation: [],\n    loginFailed: null,\n    error: null\n  }),\n  actions: {\n    async fetchDataUser() {\n      try {\n        const response = await api.get('/api/user', {\n          headers: {\n            'Authorization': 'Bearer ' + this.token\n          }\n        });\n        this.user = response.data;\n        console.log(response);\n      } catch (err) {\n        this.error = 'Error fetching user data.';\n      }\n    },\n    login(router) {\n      if (this.user.email && this.user.password) {\n        api.get('/sanctum/csrf-cookie').then(response => {\n          //debug cookie\n          console.log(response);\n          api.post('/api/login', {\n            email: this.user.email,\n            password: this.user.password\n          }).then(res => {\n            //debug user login\n            console.log(res);\n            if (res.data.success) {\n              //set localStorage\n              localStorage.setItem(\"loggedIn\", \"true\");\n\n              //set localStorage Token\n              localStorage.setItem(\"token\", res.data.token);\n\n              //change state\n              this.loggedIn = true;\n\n              //redirect dashboard\n              return router.push({\n                name: 'dashboard'\n              });\n            } else {\n              //set state login failed\n              this.loginFailed = true;\n            }\n          }).catch(error => {\n            console.log(error);\n          });\n        });\n      }\n      this.validation = [];\n      if (!this.user.email) {\n        this.validation.email = true;\n      }\n      if (!this.user.password) {\n        this.validation.password = true;\n      }\n    },\n    logout(router) {\n      api.get('/api/logout').then(() => {\n        localStorage.removeItem('loggedIn');\n        // Redirect using the provided router instance\n        router.push({\n          name: 'login'\n        });\n        router.push({\n          path: \"/login\"\n        });\n      }).catch(error => {\n        console.error('Error during logout:', error);\n      });\n    }\n  }\n});","map":{"version":3,"names":["defineStore","api","router","useAuth","id","state","loggedIn","localStorage","getItem","token","user","validation","loginFailed","error","actions","fetchDataUser","response","get","headers","data","console","log","err","login","email","password","then","post","res","success","setItem","push","name","catch","logout","removeItem","path"],"sources":["E:/Programming/PROJECT/sm-putra/smputra-frontend/src/store/auth.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport api from '../api';\r\nimport router from '@/router';\r\n\r\nexport const useAuth = defineStore({\r\n  id: 'auth',\r\n  state: () => ({\r\n    loggedIn: localStorage.getItem('loggedIn'),\r\n    token: localStorage.getItem('token'),\r\n    user: [],\r\n    validation: [],\r\n    loginFailed: null,\r\n    error: null\r\n  }),\r\n  actions: {\r\n    async fetchDataUser() {\r\n      try {\r\n        const response = await api.get('/api/user', {headers: {'Authorization': 'Bearer '+this.token}})\r\n        this.user = response.data\r\n        console.log(response)\r\n      } catch (err) {\r\n        this.error = 'Error fetching user data.';\r\n      }\r\n    },\r\n    login(router) {\r\n        if (this.user.email && this.user.password) {\r\n            api.get('/sanctum/csrf-cookie')\r\n                .then(response => {\r\n\r\n                    //debug cookie\r\n                    console.log(response)\r\n\r\n                    api.post('/api/login', {\r\n                        email: this.user.email,\r\n                        password: this.user.password\r\n                    }).then(res => {\r\n\r\n                        //debug user login\r\n                        console.log(res)\r\n\r\n                        if (res.data.success) {\r\n\r\n                            //set localStorage\r\n                            localStorage.setItem(\"loggedIn\", \"true\")\r\n\r\n                            //set localStorage Token\r\n                            localStorage.setItem(\"token\", res.data.token)\r\n\r\n                            //change state\r\n                            this.loggedIn = true\r\n\r\n                            //redirect dashboard\r\n                            return router.push({ name: 'dashboard' });\r\n\r\n                        } else {\r\n\r\n                            //set state login failed\r\n                            this.loginFailed = true\r\n\r\n                        }\r\n\r\n                    }).catch(error => {\r\n                        console.log(error)\r\n                    })\r\n\r\n                })\r\n        }\r\n\r\n        this.validation = []\r\n\r\n        if (!this.user.email) {\r\n            this.validation.email = true\r\n        }\r\n\r\n        if (!this.user.password) {\r\n            this.validation.password = true\r\n        }\r\n\r\n    },\r\n    logout(router) {\r\n        api.get('/api/logout')\r\n          .then(() => {\r\n            localStorage.removeItem('loggedIn');\r\n            // Redirect using the provided router instance\r\n            router.push({ name: 'login' })\r\n            router.push({ path: \"/login\" });\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error during logout:', error);\r\n          });\r\n    },\r\n    },\r\n  },\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}