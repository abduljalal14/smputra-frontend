{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport api from '../api';\nexport const useOrder = defineStore({\n  id: 'order',\n  state: () => ({\n    orders: null,\n    order: {},\n    isExist: null,\n    orderId: '',\n    customerName: '',\n    customerAddres: '',\n    customerPhone: '',\n    storeLocation: \"Sari Mulya Pasarbatang\",\n    ongkir: 3000,\n    orderMethod: 'COD',\n    subtotal: 0,\n    total: 0,\n    formData: new FormData(),\n    error: true\n  }),\n  actions: {\n    async fetchDataOrders() {\n      try {\n        const response = await api.get('/api/orders');\n        this.orders = response.data.data.data;\n        this.error = false;\n      } catch (err) {\n        this.error = true;\n      }\n    },\n    async fetchDataOrder(order_id) {\n      console.log('test 2 passed');\n      try {\n        console.log('test 3 passed');\n        const response = await api.get(`/api/orders/${order_id}`);\n        console.log('test 4 passed');\n        this.order.orderId = response.data.data.order_id;\n        console.log('test 5 passed');\n        this.order.name = response.data.data.customer_name;\n        this.order.phone = response.data.data.customer_phone;\n        this.order.address = response.data.data.customer_address;\n        this.order.store = response.data.data.store_location;\n        this.order.method = response.data.data.shipping_method;\n        this.order.date = response.data.data.created_at;\n        this.order.items = response.data.data.order_details;\n        console.log('isi dari order name: ', this.order.name);\n        this.error = false;\n      } catch (err) {\n        this.error = true;\n        console.log(err);\n      }\n    },\n    async storeOrder(router, orderItem) {\n      // mebuat order_id\n      const currentDate = new Date();\n      const day = currentDate.getDate().toString().padStart(2, '0');\n      const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');\n      const year = currentDate.getFullYear().toString().substr(-2);\n      const dateString = day + month + year;\n      const randomDigits = Math.floor(1000 + Math.random() * 9000);\n      this.orderId = dateString + randomDigits;\n      // membuat formdata\n      this.formData = {\n        \"customer_name\": this.customerName,\n        \"order_id\": this.orderId,\n        \"customer_phone\": this.customerPhone,\n        \"customer_address\": this.customerAddres,\n        \"store_location\": this.storeLocation,\n        \"shipping_method\": this.orderMethod,\n        \"details\": orderItem\n      };\n      const response = await api.post('/api/orders', this.formData);\n      try {\n        this.formData = new FormData();\n        //redirect\n        router.push({\n          path: \"/\"\n        });\n      } catch (err) {\n        //assign response error data to state \"errors\"\n        this.errors = response.data;\n      }\n    },\n    reset() {\n      this.orders = null, this.order = {}, this.customerName = '', this.customerAddres = '', this.customerPhone = '', this.storeLocation = \"Sari Mulya Pasarbatang\", this.ongkir = 3000, this.orderMethod = 'COD', this.subtotal = 0, this.total = 0, this.formData = new FormData();\n    }\n  },\n  getters: {\n    formatted() {\n      const date = new Date(this.order.date);\n      const options = {\n        day: 'numeric',\n        month: 'long',\n        year: 'numeric'\n      };\n      console.log(date);\n      console.log(date.toLocaleDateString('id-ID', options));\n      return date.toLocaleDateString('id-ID', options);\n    },\n    invalid() {\n      return this.customerName === '' || this.customerAddres === '' || this.customerPhone === '';\n    },\n    getTotal() {\n      if (this.orderMethod == 'COD') {\n        this.total = this.subtotal + this.ongkir;\n      } else {\n        this.total = this.subtotal;\n      }\n      return this.total;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","api","useOrder","id","state","orders","order","isExist","orderId","customerName","customerAddres","customerPhone","storeLocation","ongkir","orderMethod","subtotal","total","formData","FormData","error","actions","fetchDataOrders","response","get","data","err","fetchDataOrder","order_id","console","log","name","customer_name","phone","customer_phone","address","customer_address","store","store_location","method","shipping_method","date","created_at","items","order_details","storeOrder","router","orderItem","currentDate","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","substr","dateString","randomDigits","Math","floor","random","post","push","path","errors","reset","getters","formatted","options","toLocaleDateString","invalid","getTotal"],"sources":["E:/Programming/PROJECT/sm-putra/smputra-frontend/src/store/order.js"],"sourcesContent":["import { defineStore } from 'pinia';\r\nimport api from '../api';\r\n\r\nexport const useOrder = defineStore({\r\n  id: 'order',\r\n  state: () => ({ \r\n    orders:null,\r\n    order:{},\r\n    isExist: null,\r\n    orderId: '',\r\n    customerName: '',\r\n    customerAddres: '',\r\n    customerPhone: '',\r\n    storeLocation: \"Sari Mulya Pasarbatang\",\r\n    ongkir: 3000,\r\n    orderMethod: 'COD',\r\n    subtotal: 0,\r\n    total: 0,\r\n    formData: new FormData(),\r\n    error: true\r\n  }),\r\n  actions: {\r\n    async fetchDataOrders() {\r\n      try {\r\n        const response = await api.get('/api/orders');\r\n        this.orders = response.data.data.data; \r\n        this.error = false;\r\n      } catch (err) {\r\n        this.error = true;\r\n      }\r\n    },\r\n    async fetchDataOrder(order_id) {\r\n      console.log('test 2 passed')\r\n      try {\r\n        console.log('test 3 passed')\r\n      const response = await api.get(`/api/orders/${order_id}`);\r\n      console.log('test 4 passed')\r\n      this.order.orderId = response.data.data.order_id\r\n      console.log('test 5 passed')\r\n      this.order.name = response.data.data.customer_name\r\n      this.order.phone = response.data.data.customer_phone\r\n      this.order.address = response.data.data.customer_address\r\n      this.order.store = response.data.data.store_location\r\n      this.order.method = response.data.data.shipping_method\r\n      this.order.date = response.data.data.created_at\r\n      this.order.items = response.data.data.order_details\r\n      console.log('isi dari order name: ', this.order.name)\r\n      this.error = false;\r\n    } catch (err) {\r\n      this.error = true;\r\n      console.log(err)\r\n    }\r\n    },\r\n    async storeOrder (router, orderItem){\r\n      // mebuat order_id\r\n      const currentDate = new Date();\r\n      const day = currentDate.getDate().toString().padStart(2, '0');\r\n      const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');\r\n      const year = currentDate.getFullYear().toString().substr(-2);\r\n      const dateString = day + month + year;\r\n      const randomDigits = Math.floor(1000 + Math.random() * 9000);\r\n      this.orderId = dateString + randomDigits;\r\n      // membuat formdata\r\n      this.formData = {\r\n        \"customer_name\": this.customerName,\r\n        \"order_id\": this.orderId,\r\n        \"customer_phone\": this.customerPhone,\r\n        \"customer_address\": this.customerAddres,\r\n        \"store_location\": this.storeLocation,\r\n        \"shipping_method\": this.orderMethod,\r\n        \"details\": orderItem\r\n      }\r\n      const response = await api.post('/api/orders', this.formData)\r\n      try{\r\n          this.formData = new FormData()\r\n          //redirect\r\n          router.push({ path: \"/\" });\r\n      }\r\n      catch(err){\r\n          //assign response error data to state \"errors\"\r\n          this.errors = response.data;\r\n      }\r\n    },\r\n    reset() {\r\n      this.orders=null,\r\n      this.order={},\r\n      this.customerName= '',\r\n      this.customerAddres= '',\r\n      this.customerPhone= '',\r\n      this.storeLocation= \"Sari Mulya Pasarbatang\",\r\n      this.ongkir= 3000,\r\n      this.orderMethod= 'COD',\r\n      this.subtotal= 0,\r\n      this.total= 0,\r\n      this.formData= new FormData()\r\n    }\r\n  },\r\n\r\n  getters: {\r\n    formatted() {\r\n      const date = new Date(this.order.date)\r\n      const options = { day: 'numeric', month: 'long', year: 'numeric' }\r\n      console.log(date)\r\n      console.log(date.toLocaleDateString('id-ID', options))\r\n      return date.toLocaleDateString('id-ID', options)\r\n  },\r\n    invalid() {\r\n      return this.customerName === '' || this.customerAddres === '' || this.customerPhone === '';\r\n  },\r\n    getTotal(){\r\n      if (this.orderMethod == 'COD') {\r\n        this.total = this.subtotal+this.ongkir\r\n      } else {\r\n        this.total = this.subtotal\r\n      }\r\n      return this.total\r\n  }\r\n  }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}